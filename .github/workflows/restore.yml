name: Recovery

on:
  workflow_dispatch:

jobs:
  recovery:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run recovery script
        run: |
          #!/usr/bin/env bash
          set -e
          
          # ============================
          # Part 1: Backend Directories & package.json
          # ============================
          
          # Create backend directory structure
          mkdir -p backend/prisma
          mkdir -p backend/src/config
          mkdir -p backend/src/middleware
          mkdir -p backend/src/utils
          mkdir -p backend/src/routes/auth
          mkdir -p backend/src/routes/users
          mkdir -p backend/src/routes/subscriptions/plans
          mkdir -p backend/src/routes/subscriptions
          mkdir -p backend/src/routes/trusts
          mkdir -p backend/src/routes/transactions
          mkdir -p backend/src/routes/vault
          mkdir -p backend/src/controllers/auth
          mkdir -p backend/src/controllers/users
          mkdir -p backend/src/controllers/subscriptions
          mkdir -p backend/src/controllers/trusts
          mkdir -p backend/src/controllers/transactions
          mkdir -p backend/src/controllers/vault
          mkdir -p backend/src/models
          mkdir -p backend/src/services
          mkdir -p backend/src/jobs
          mkdir -p backend/src/jobs/notifications
          mkdir -p backend/src/jobs/reminders
          
          # Initialize package.json
          cat > backend/package.json << 'EOF'
          {
            "name": "legacy-pro-backend",
            "version": "1.0.0",
            "main": "dist/server.js",
            "scripts": {
              "dev": "NODE_ENV=development nodemon src/server.ts",
              "build": "tsc",
              "start": "NODE_ENV=production node dist/server.js",
              "migrate": "prisma migrate dev --name init",
              "generate": "prisma generate",
              "lint": "eslint . --ext .ts",
              "test": "jest"
            },
            "dependencies": {
              "@prisma/client": "^4.0.0",
              "bcrypt": "^5.0.1",
              "bull": "^4.0.0",
              "cors": "^2.8.5",
              "csurf": "^1.11.0",
              "dotenv": "^10.0.0",
              "express": "^4.17.1",
              "express-rate-limit": "^6.0.0",
              "helmet": "^5.0.2",
              "jsonwebtoken": "^8.5.1",
              "multer": "^1.4.4",
              "nodemailer": "^6.7.2",
              "pg": "^8.7.1",
              "prisma": "^4.0.0",
              "rate-limit-redis": "^1.7.0",
              "redis": "^4.0.4",
              "stripe": "^8.174.0",
              "ts-node": "^10.4.0",
              "typeorm": "^0.2.41",
              "uuid": "^8.3.2",
              "winston": "^3.3.3"
            },
            "devDependencies": {
              "@types/bcrypt": "^5.0.0",
              "@types/cors": "^2.8.12",
              "@types/express": "^4.17.13",
              "@types/jest": "^27.0.2",
              "@types/jsonwebtoken": "^8.5.5",
              "@types/multer": "^1.4.7",
              "@typescript-eslint/eslint-plugin": "^5.3.0",
              "@typescript-eslint/parser": "^5.3.0",
              "eslint": "^8.2.0",
              "jest": "^27.3.1",
              "nodemon": "^2.0.15",
              "ts-jest": "^27.0.7",
              "ts-node-dev": "^1.1.8",
              "typescript": "^4.4.4"
            }
          }
          EOF
          
          # ============================
          # Part 2: Prisma schema
          # ============================
          cat > backend/prisma/schema.prisma << 'EOF'
          datasource db {
            provider = "postgresql"
            url      = env("DATABASE_URL")
          }
          
          generator client {
            provider = "prisma-client-js"
          }
          
          model User {
            id         String   @id @default(uuid())
            email      String   @unique
            password   String
            createdAt  DateTime @default(now())
            updatedAt  DateTime @updatedAt
            profile    Profile?
            subscriptions Subscription[]
            trusts     Trust[]
            vaultItems VaultItem[]
          }
          
          model Profile {
            id        String  @id @default(uuid())
            user      User    @relation(fields: [userId], references: [id])
            userId    String
            firstName String
            lastName  String
            avatarUrl String?
          }
          
          model Subscription {
            id         String   @id @default(uuid())
            user       User     @relation(fields: [userId], references: [id])
            userId     String
            plan       Plan     @relation(fields: [planId], references: [id])
            planId     String
            status     String
            startedAt  DateTime @default(now())
            endedAt    DateTime?
          }
          
          model Plan {
            id          String         @id @default(uuid())
            name        String
            price       Int
            interval    String
            subscriptions Subscription[]
          }
          
          model Trust {
            id          String   @id @default(uuid())
            user        User     @relation(fields: [userId], references: [id])
            userId      String
            name        String
            createdAt   DateTime @default(now())
            provisions  Json
            isComplete  Boolean  @default(false)
          }
          
          model VaultItem {
            id        String   @id @default(uuid())
            user      User     @relation(fields: [userId], references: [id])
            userId    String
            fileName  String
            fileUrl   String
            createdAt DateTime @default(now())
          }
          
          model Notification {
            id        String   @id @default(uuid())
            user      User     @relation(fields: [userId], references: [id])
            userId    String
            message   String
            read      Boolean  @default(false)
            createdAt DateTime @default(now())
          }
          
          model Reminder {
            id        String   @id @default(uuid())
            user      User     @relation(fields: [userId], references: [id])
            userId    String
            title     String
            datetime  DateTime
            sent      Boolean  @default(false)
          }
          EOF
          
          # ============================
          # Part 3: Environment Templates
          # ============================
          mkdir -p backend
          cat > backend/.env.example << 'EOF'
          DATABASE_URL=postgresql://USER:PASSWORD@HOST:PORT/DBNAME
          JWT_SECRET=your_jwt_secret_here
          STRIPE_SECRET_KEY=your_stripe_secret_key_here
          STRIPE_WEBHOOK_SECRET=your_stripe_webhook_secret_here
          
          OPENAI_API_KEY=your_openai_key_here
          SMTP_HOST=smtp.sendgrid.net
          SMTP_PORT=587
          SMTP_USER=apikey_or_smtp_user
          SMTP_PASS=apikey_or_smtp_pass
          EOF
          
          # ============================
          # Part 4: Initialize Node.js Backend
          # ============================
          cd backend
          npm install
          npx prisma generate
                    # Skipping prisma migrate (DATABASE_URL not set in CI)
                    # npx prisma migrate dev --name init
          cd ..
          
          # ============================
          # Part 5: Frontend Directories & package.json
          # ============================
          mkdir -p frontend/src/components/layout
          mkdir -p frontend/src/components/vault
          mkdir -p frontend/src/components/trust
          mkdir -p frontend/src/components/entity
          mkdir -p frontend/src/pages/api/auth
          mkdir -p frontend/src/pages/api/trusts
          mkdir -p frontend/src/pages/api/vault
          mkdir -p frontend/src/pages/dashboard
          mkdir -p frontend/public/images
          mkdir -p frontend/styles
          
          cat > frontend/package.json << 'EOF'
          {
            "name": "legacy-pro-frontend",
            "version": "1.0.0",
            "scripts": {
              "dev": "next dev",
              "build": "next build",
              "start": "next start",
              "lint": "eslint . --ext .js,.jsx,.ts,.tsx"
            },
            "dependencies": {
              "next": "16.0.0",
              "react": "18.2.0",
              "react-dom": "18.2.0",
              "axios": "^0.24.0",
              "swr": "^1.1.2",
              "tailwindcss": "^2.2.19",
              "typescript": "^4.4.4",
              "firebase": "^9.6.1",
              "next-auth": "^4.1.0",
              "@heroicons/react": "^1.0.6",
              "@tailwindcss/forms": "^0.3.4"
            },
            "devDependencies": {
              "@types/node": "^16.11.7",
              "@types/react": "^17.0.34",
              "eslint": "^8.2.0",
              "eslint-config-next": "^12.0.7"
            }
          }
          EOF
          
          # ============================
          # Part 6: Tailwind & Next Setup
          # ============================
          cd frontend
          npx tailwindcss init -p
          echo "module.exports = {" > tailwind.config.js
          echo "  content: ["./src/**/*.{js,jsx,ts,tsx}"]," >> tailwind.config.js
          echo "  theme: { extend: {} }," >> tailwind.config.js
          echo "  plugins: [require('@tailwindcss/forms')]," >> tailwind.config.js
          echo "};" >> tailwind.config.js
          mkdir -p src/pages/api
          cd ..
          
          # ============================
          # Part 7: Firebase Initialization (Optional)
          # ============================
          # (If using Firebase, otherwise skip)
          # cd frontend
          # npm install firebase
          # echo "// Firebase init code here" > src/firebaseConfig.js
          # cd ..
          
          # ============================
          # Part 8: Create Push & Email Templates
          # ============================
          mkdir -p backend/src/templates/email
          mkdir -p backend/src/templates/push
          mkdir -p backend/src/templates/reminder
          cat > backend/src/templates/email/welcome.html << 'EOF'
          <html>
            <body>
              <h1>Welcome to Legacy Pro!</h1>
              <p>Dear {{name}}, thank you for signing up.</p>
            </body>
          </html>
          EOF
          
          cat > backend/src/templates/push/notification.txt << 'EOF'
          Hello {{name}}, you have a new notification.
          EOF
          
          # ============================
          # Part 9: Email Templates & Push Notifications
          # ============================
          mkdir -p frontend/public/templates/email
          mkdir -p frontend/public/templates/push
          cat > frontend/public/templates/email/reset-password.html << 'EOF'
          <html>
            <body>
              <h1>Reset Your Password</h1>
              <p>Click <a href="{{resetLink}}">here</a> to reset.</p>
            </body>
          </html>
          EOF
          
          cat > frontend/public/templates/push/new-notification.txt << 'EOF'
          New alert: {{alertMessage}}
          EOF
          
          echo "Part 9 complete: Email templates and push notification registration added."
